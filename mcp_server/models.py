# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T11:56:53+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import List, Optional

from pydantic import BaseModel, Field, RootModel


class APIVersion(RootModel[str]):
    root: str = Field(..., description='Specifies the version of the client tool.')


class Carrier(RootModel[str]):
    root: str = Field(
        ...,
        description='Name of the shipping company. This value is included when the LocationCode is "Returned".',
    )


class CreationDate(RootModel[datetime]):
    root: datetime = Field(
        ...,
        description='Timestamp of the CreateJob request in ISO8601 date format. For example "2010-03-28T20:27:35Z".',
    )


class CurrentManifest(RootModel[str]):
    root: str = Field(
        ...,
        description='The last manifest submitted, which will be used to process the job.',
    )


class Description(RootModel[str]):
    root: str = Field(..., description='The associated description for this object.')


class ErrorCount(RootModel[int]):
    root: int = Field(
        ...,
        description='Number of errors. We return this value when the ProgressCode is Success or SuccessWithErrors.',
    )


class ErrorMessage(RootModel[str]):
    root: str = Field(
        ..., description='The human-readable description of a particular error.'
    )


class ExpiredJobIdException(BaseModel):
    message: Optional[ErrorMessage] = None


class GenericString(RootModel[str]):
    root: str


class GetShippingLabelOutput(BaseModel):
    ShippingLabelURL: Optional[GenericString] = None
    Warning: Optional[GenericString] = None


class InvalidAccessKeyIdException(BaseModel):
    message: Optional[ErrorMessage] = None


class InvalidAddressException(BaseModel):
    message: Optional[ErrorMessage] = None


class InvalidCustomsException(BaseModel):
    message: Optional[ErrorMessage] = None


class InvalidFileSystemException(BaseModel):
    message: Optional[ErrorMessage] = None


class InvalidJobIdException(BaseModel):
    message: Optional[ErrorMessage] = None


class InvalidManifestFieldException(BaseModel):
    message: Optional[ErrorMessage] = None


class InvalidParameterException(BaseModel):
    message: Optional[ErrorMessage] = None


class InvalidVersionException(BaseModel):
    message: Optional[ErrorMessage] = None


class IsCanceled(RootModel[bool]):
    root: bool = Field(..., description='Indicates whether the job was canceled.')


class IsTruncated(RootModel[bool]):
    root: bool = Field(
        ...,
        description='Indicates whether the list of jobs was truncated. If true, then call ListJobs again using the last JobId element as the marker.',
    )


class JobId(RootModel[str]):
    root: str = Field(
        ..., description='A unique identifier which refers to a particular job.'
    )


class JobIdList(RootModel[List[GenericString]]):
    root: List[GenericString]


class JobType(Enum):
    Import = 'Import'
    Export = 'Export'


class LocationCode(RootModel[str]):
    root: str = Field(
        ...,
        description='A token representing the location of the storage device, such as "AtAWS".',
    )


class LocationMessage(RootModel[str]):
    root: str = Field(
        ...,
        description='A more human readable form of the physical location of the storage device.',
    )


class LogBucket(RootModel[str]):
    root: str = Field(..., description='Amazon S3 bucket for user logs.')


class LogKey(RootModel[str]):
    root: str = Field(..., description='The key where the user logs were stored.')


class MalformedManifestException(BaseModel):
    message: Optional[ErrorMessage] = None


class Manifest(RootModel[str]):
    root: str = Field(..., description='The UTF-8 encoded text of the manifest file.')


class ManifestAddendum(RootModel[str]):
    root: str = Field(..., description='For internal use only.')


class Marker(RootModel[str]):
    root: str = Field(
        ...,
        description='Specifies the JOBID to start after when listing the jobs created with your account. AWS Import/Export lists your jobs in reverse chronological order. See MaxJobs.',
    )


class MaxJobs(RootModel[int]):
    root: int = Field(
        ...,
        description='Sets the maximum number of jobs returned in the response. If there are additional jobs that were not returned because MaxJobs was exceeded, the response contains &lt;IsTruncated&gt;true&lt;/IsTruncated&gt;. To return the additional jobs, see Marker.',
    )


class MissingCustomsException(BaseModel):
    message: Optional[ErrorMessage] = None


class MissingManifestFieldException(BaseModel):
    message: Optional[ErrorMessage] = None


class MissingParameterException(BaseModel):
    message: Optional[ErrorMessage] = None


class MultipleRegionsException(BaseModel):
    message: Optional[ErrorMessage] = None


class NoSuchBucketException(BaseModel):
    message: Optional[ErrorMessage] = None


class ProgressCode(RootModel[str]):
    root: str = Field(
        ..., description='A token representing the state of the job, such as "Started".'
    )


class ProgressMessage(RootModel[str]):
    root: str = Field(..., description='A more human readable form of the job status.')


class Signature(RootModel[str]):
    root: str = Field(
        ...,
        description='An encrypted code used to authenticate the request and response, for example, "DV+TpDfx1/TdSE9ktyK9k/bDTVI=". Only use this value is you want to create the signature file yourself. Generally you should use the SignatureFileContents value.',
    )


class SignatureFileContents(RootModel[str]):
    root: str = Field(
        ..., description='The actual text of the SIGNATURE file to be written to disk.'
    )


class Success(RootModel[bool]):
    root: bool = Field(
        ...,
        description='Specifies whether (true) or not (false) AWS Import/Export updated your job.',
    )


class TrackingNumber(RootModel[str]):
    root: str = Field(
        ...,
        description='The shipping tracking number assigned by AWS Import/Export to the storage device when it\'s returned to you. We return this value when the LocationCode is "Returned".',
    )


class URL(RootModel[str]):
    root: str = Field(..., description='The URL for a given Artifact.')


class UnableToCancelJobIdException(BaseModel):
    message: Optional[ErrorMessage] = None


class UnableToUpdateJobIdException(BaseModel):
    message: Optional[ErrorMessage] = None


class ValidateOnly(RootModel[bool]):
    root: bool = Field(
        ...,
        description='Validate the manifest and parameter values in the request but do not actually create a job.',
    )


class WarningMessage(RootModel[str]):
    root: str = Field(
        ...,
        description='An optional message notifying you of non-fatal issues with the job, such as use of an incompatible Amazon S3 bucket name.',
    )


class City(RootModel[str]):
    root: str = Field(
        ..., description='Specifies the name of your city for the return address.'
    )


class Company(RootModel[str]):
    root: str = Field(
        ...,
        description='Specifies the name of the company that will ship this package.',
    )


class Country(RootModel[str]):
    root: str = Field(
        ..., description='Specifies the name of your country for the return address.'
    )


class Name(RootModel[str]):
    root: str = Field(
        ...,
        description='Specifies the name of the person responsible for shipping this package.',
    )


class PhoneNumber(RootModel[str]):
    root: str = Field(
        ...,
        description='Specifies the phone number of the person responsible for shipping this package.',
    )


class PostalCode(RootModel[str]):
    root: str = Field(
        ..., description='Specifies the postal code for the return address.'
    )


class StateOrProvince(RootModel[str]):
    root: str = Field(
        ...,
        description='Specifies the name of your state or your province for the return address.',
    )


class Street1(RootModel[str]):
    root: str = Field(
        ...,
        description='Specifies the first part of the street address for the return address, for example 1234 Main Street.',
    )


class Street2(RootModel[str]):
    root: str = Field(
        ...,
        description='Specifies the optional second part of the street address for the return address, for example Suite 100.',
    )


class Street3(RootModel[str]):
    root: str = Field(
        ...,
        description='Specifies the optional third part of the street address for the return address, for example c/o Jane Doe.',
    )


class Operation(Enum):
    CancelJob = 'CancelJob'


class Action(Enum):
    CancelJob = 'CancelJob'


class Version(Enum):
    field_2010_06_01 = '2010-06-01'


class Operation4(Enum):
    CreateJob = 'CreateJob'


class Action4(Enum):
    CreateJob = 'CreateJob'


class Operation8(Enum):
    GetShippingLabel = 'GetShippingLabel'


class Action8(Enum):
    GetShippingLabel = 'GetShippingLabel'


class JobIds(RootModel[List[GenericString]]):
    root: List[GenericString]


class Operation12(Enum):
    GetStatus = 'GetStatus'


class Action12(Enum):
    GetStatus = 'GetStatus'


class Operation16(Enum):
    ListJobs = 'ListJobs'


class Action16(Enum):
    ListJobs = 'ListJobs'


class Operation20(Enum):
    UpdateJob = 'UpdateJob'


class Action20(Enum):
    UpdateJob = 'UpdateJob'


class Artifact(BaseModel):
    Description_1: Optional[Description] = Field(None, alias='Description')
    URL_1: Optional[URL] = Field(None, alias='URL')


class ArtifactList(RootModel[List[Artifact]]):
    root: List[Artifact] = Field(..., description='A collection of artifacts.')


class BucketPermissionException(BaseModel):
    message: Optional[ErrorMessage] = None


class CancelJobInput(BaseModel):
    APIVersion_1: Optional[APIVersion] = Field(None, alias='APIVersion')
    JobId_1: JobId = Field(..., alias='JobId')


class CancelJobOutput(BaseModel):
    Success_1: Optional[Success] = Field(None, alias='Success')


class CanceledJobIdException(BaseModel):
    message: Optional[ErrorMessage] = None


class CreateJobInput(BaseModel):
    APIVersion_1: Optional[APIVersion] = Field(None, alias='APIVersion')
    JobType_1: JobType = Field(..., alias='JobType')
    Manifest_1: Manifest = Field(..., alias='Manifest')
    ManifestAddendum_1: Optional[ManifestAddendum] = Field(
        None, alias='ManifestAddendum'
    )
    ValidateOnly_1: ValidateOnly = Field(..., alias='ValidateOnly')


class CreateJobOutput(BaseModel):
    ArtifactList_1: Optional[ArtifactList] = Field(None, alias='ArtifactList')
    JobId_1: Optional[JobId] = Field(None, alias='JobId')
    JobType_1: Optional[JobType] = Field(None, alias='JobType')
    Signature_1: Optional[Signature] = Field(None, alias='Signature')
    SignatureFileContents_1: Optional[SignatureFileContents] = Field(
        None, alias='SignatureFileContents'
    )
    WarningMessage_1: Optional[WarningMessage] = Field(None, alias='WarningMessage')


class CreateJobQuotaExceededException(BaseModel):
    message: Optional[ErrorMessage] = None


class GetShippingLabelInput(BaseModel):
    APIVersion_1: Optional[APIVersion] = Field(None, alias='APIVersion')
    city: Optional[City] = None
    company: Optional[Company] = None
    country: Optional[Country] = None
    jobIds: JobIdList
    name: Optional[Name] = None
    phoneNumber: Optional[PhoneNumber] = None
    postalCode: Optional[PostalCode] = None
    stateOrProvince: Optional[StateOrProvince] = None
    street1: Optional[Street1] = None
    street2: Optional[Street2] = None
    street3: Optional[Street3] = None


class GetStatusInput(BaseModel):
    APIVersion_1: Optional[APIVersion] = Field(None, alias='APIVersion')
    JobId_1: JobId = Field(..., alias='JobId')


class GetStatusOutput(BaseModel):
    ArtifactList_1: Optional[ArtifactList] = Field(None, alias='ArtifactList')
    Carrier_1: Optional[Carrier] = Field(None, alias='Carrier')
    CreationDate_1: Optional[CreationDate] = Field(None, alias='CreationDate')
    CurrentManifest_1: Optional[CurrentManifest] = Field(None, alias='CurrentManifest')
    ErrorCount_1: Optional[ErrorCount] = Field(None, alias='ErrorCount')
    JobId_1: Optional[JobId] = Field(None, alias='JobId')
    JobType_1: Optional[JobType] = Field(None, alias='JobType')
    LocationCode_1: Optional[LocationCode] = Field(None, alias='LocationCode')
    LocationMessage_1: Optional[LocationMessage] = Field(None, alias='LocationMessage')
    LogBucket_1: Optional[LogBucket] = Field(None, alias='LogBucket')
    LogKey_1: Optional[LogKey] = Field(None, alias='LogKey')
    ProgressCode_1: Optional[ProgressCode] = Field(None, alias='ProgressCode')
    ProgressMessage_1: Optional[ProgressMessage] = Field(None, alias='ProgressMessage')
    Signature_1: Optional[Signature] = Field(None, alias='Signature')
    SignatureFileContents: Optional[Signature] = None
    TrackingNumber_1: Optional[TrackingNumber] = Field(None, alias='TrackingNumber')


class Job(BaseModel):
    CreationDate_1: Optional[CreationDate] = Field(None, alias='CreationDate')
    IsCanceled_1: Optional[IsCanceled] = Field(None, alias='IsCanceled')
    JobId_1: Optional[JobId] = Field(None, alias='JobId')
    JobType_1: Optional[JobType] = Field(None, alias='JobType')


class JobsList(RootModel[List[Job]]):
    root: List[Job] = Field(
        ..., description='A list container for Jobs returned by the ListJobs operation.'
    )


class ListJobsInput(BaseModel):
    APIVersion_1: Optional[APIVersion] = Field(None, alias='APIVersion')
    Marker_1: Optional[Marker] = Field(None, alias='Marker')
    MaxJobs_1: Optional[MaxJobs] = Field(None, alias='MaxJobs')


class ListJobsOutput(BaseModel):
    IsTruncated_1: Optional[IsTruncated] = Field(None, alias='IsTruncated')
    Jobs: Optional[JobsList] = None


class UpdateJobInput(BaseModel):
    APIVersion_1: Optional[APIVersion] = Field(None, alias='APIVersion')
    JobId_1: JobId = Field(..., alias='JobId')
    JobType_1: JobType = Field(..., alias='JobType')
    Manifest_1: Manifest = Field(..., alias='Manifest')
    ValidateOnly_1: ValidateOnly = Field(..., alias='ValidateOnly')


class UpdateJobOutput(BaseModel):
    ArtifactList_1: Optional[ArtifactList] = Field(None, alias='ArtifactList')
    Success_1: Optional[Success] = Field(None, alias='Success')
    WarningMessage_1: Optional[WarningMessage] = Field(None, alias='WarningMessage')
