# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T11:56:53+00:00



import argparse
import json
import os
from typing import *
from typing import Optional, Union

from autogen.mcp.mcp_proxy import MCPProxy
from autogen.mcp.mcp_proxy.security import APIKeyHeader, BaseSecurity
from fastapi import Query

from models import (
    Action,
    Action4,
    Action8,
    Action12,
    Action16,
    Action20,
    BucketPermissionException,
    CanceledJobIdException,
    CancelJobOutput,
    CreateJobOutput,
    CreateJobQuotaExceededException,
    ExpiredJobIdException,
    GetShippingLabelOutput,
    GetStatusOutput,
    InvalidAccessKeyIdException,
    InvalidAddressException,
    InvalidCustomsException,
    InvalidFileSystemException,
    InvalidJobIdException,
    InvalidManifestFieldException,
    InvalidParameterException,
    InvalidVersionException,
    JobIds,
    JobType,
    ListJobsOutput,
    MalformedManifestException,
    MissingCustomsException,
    MissingManifestFieldException,
    MissingParameterException,
    MultipleRegionsException,
    NoSuchBucketException,
    Operation,
    Operation4,
    Operation8,
    Operation12,
    Operation16,
    Operation20,
    UnableToCancelJobIdException,
    UnableToUpdateJobIdException,
    UpdateJobOutput,
    Version,
)

app = MCPProxy(
    contact={
        'email': 'mike.ralphson@gmail.com',
        'name': 'Mike Ralphson',
        'url': 'https://github.com/mermade/aws2openapi',
        'x-twitter': 'PermittedSoc',
    },
    description="<fullname>AWS Import/Export Service</fullname> AWS Import/Export accelerates transferring large amounts of data between the AWS cloud and portable storage devices that you mail to us. AWS Import/Export transfers data directly onto and off of your storage devices using Amazon's high-speed internal network and bypassing the Internet. For large data sets, AWS Import/Export is often faster than Internet transfer and more cost effective than upgrading your connectivity.",
    license={'name': 'Apache 2.0 License', 'url': 'http://www.apache.org/licenses/'},
    termsOfService='https://aws.amazon.com/service-terms/',
    title='AWS Import/Export',
    version='2010-06-01',
    servers=[
        {
            'description': 'The general AWS Import/Export multi-region endpoint',
            'url': 'http://importexport.amazonaws.com',
            'variables': {},
        },
        {
            'description': 'The general AWS Import/Export multi-region endpoint',
            'url': 'https://importexport.amazonaws.com',
            'variables': {},
        },
        {
            'description': 'The AWS Import/Export endpoint for China (Beijing) and China (Ningxia)',
            'url': 'http://importexport.{region}.amazonaws.com.cn',
            'variables': {
                'region': {
                    'default': 'cn-north-1',
                    'description': 'The AWS region',
                    'enum': ['cn-north-1', 'cn-northwest-1'],
                }
            },
        },
        {
            'description': 'The AWS Import/Export endpoint for China (Beijing) and China (Ningxia)',
            'url': 'https://importexport.{region}.amazonaws.com.cn',
            'variables': {
                'region': {
                    'default': 'cn-north-1',
                    'description': 'The AWS region',
                    'enum': ['cn-north-1', 'cn-northwest-1'],
                }
            },
        },
    ],
)


@app.get(
    '/#Operation=CancelJob&Action=CancelJob',
    description=""" This operation cancels a specified job. Only the job owner can cancel it. The operation fails if the job has already started or is complete. """,
    tags=['job_crud_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def g_e_t__cancel_job(
    job_id: str = Query(..., alias='JobId'),
    a_p_i_version: Optional[str] = Query(None, alias='APIVersion'),
    operation: Operation = Query(..., alias='Operation'),
    action: Union[Action, str, str, str] = Query(..., alias='Action'),
    version: Union[Version, str, str, str] = Query(..., alias='Version'),
    a_w_s_access_key_id: str = Query(..., alias='AWSAccessKeyId'),
    signature_method: str = Query(..., alias='SignatureMethod'),
    signature_version: str = Query(..., alias='SignatureVersion'),
    timestamp: str = Query(..., alias='Timestamp'),
    signature: str = Query(..., alias='Signature'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#Operation=CancelJob&Action=CancelJob',
    description=""" This operation cancels a specified job. Only the job owner can cancel it. The operation fails if the job has already started or is complete. """,
    tags=['job_search_and_listings'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def p_o_s_t__cancel_job(
    operation: Operation = Query(..., alias='Operation'),
    action: Union[Action, str, str, str] = Query(..., alias='Action'),
    version: Union[Version, str, str, str] = Query(..., alias='Version'),
    a_w_s_access_key_id: str = Query(..., alias='AWSAccessKeyId'),
    signature_method: str = Query(..., alias='SignatureMethod'),
    signature_version: str = Query(..., alias='SignatureVersion'),
    timestamp: str = Query(..., alias='Timestamp'),
    signature: str = Query(..., alias='Signature'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/#Operation=CreateJob&Action=CreateJob',
    description=""" This operation initiates the process of scheduling an upload or download of your data. You include in the request a manifest that describes the data transfer specifics. The response to the request includes a job ID, which you can use in other operations, a signature that you use to identify your storage device, and the address where you should ship your storage device. """,
    tags=['job_crud_operations', 'shipping_label_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def g_e_t__create_job(
    job_type: JobType = Query(..., alias='JobType'),
    manifest: str = Query(..., alias='Manifest'),
    manifest_addendum: Optional[str] = Query(None, alias='ManifestAddendum'),
    validate_only: bool = Query(..., alias='ValidateOnly'),
    a_p_i_version: Optional[str] = Query(None, alias='APIVersion'),
    operation: Operation4 = Query(..., alias='Operation'),
    action: Union[Action4, str, str, str] = Query(..., alias='Action'),
    version: Union[Version, str, str, str] = Query(..., alias='Version'),
    a_w_s_access_key_id: str = Query(..., alias='AWSAccessKeyId'),
    signature_method: str = Query(..., alias='SignatureMethod'),
    signature_version: str = Query(..., alias='SignatureVersion'),
    timestamp: str = Query(..., alias='Timestamp'),
    signature: str = Query(..., alias='Signature'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#Operation=CreateJob&Action=CreateJob',
    description=""" This operation initiates the process of scheduling an upload or download of your data. You include in the request a manifest that describes the data transfer specifics. The response to the request includes a job ID, which you can use in other operations, a signature that you use to identify your storage device, and the address where you should ship your storage device. """,
    tags=['job_crud_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def p_o_s_t__create_job(
    operation: Operation4 = Query(..., alias='Operation'),
    action: Union[Action4, str, str, str] = Query(..., alias='Action'),
    version: Union[Version, str, str, str] = Query(..., alias='Version'),
    a_w_s_access_key_id: str = Query(..., alias='AWSAccessKeyId'),
    signature_method: str = Query(..., alias='SignatureMethod'),
    signature_version: str = Query(..., alias='SignatureVersion'),
    timestamp: str = Query(..., alias='Timestamp'),
    signature: str = Query(..., alias='Signature'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/#Operation=GetShippingLabel&Action=GetShippingLabel',
    description=""" This operation generates a pre-paid UPS shipping label that you will use to ship your device to AWS for processing. """,
    tags=['job_crud_operations', 'job_search_and_listings'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def g_e_t__get_shipping_label(
    job_ids: JobIds = Query(..., alias='jobIds'),
    name: Optional[str] = None,
    company: Optional[str] = None,
    phone_number: Optional[str] = Query(None, alias='phoneNumber'),
    country: Optional[str] = None,
    state_or_province: Optional[str] = Query(None, alias='stateOrProvince'),
    city: Optional[str] = None,
    postal_code: Optional[str] = Query(None, alias='postalCode'),
    street1: Optional[str] = None,
    street2: Optional[str] = None,
    street3: Optional[str] = None,
    a_p_i_version: Optional[str] = Query(None, alias='APIVersion'),
    operation: Operation8 = Query(..., alias='Operation'),
    action: Union[Action8, str, str, str] = Query(..., alias='Action'),
    version: Union[Version, str, str, str] = Query(..., alias='Version'),
    a_w_s_access_key_id: str = Query(..., alias='AWSAccessKeyId'),
    signature_method: str = Query(..., alias='SignatureMethod'),
    signature_version: str = Query(..., alias='SignatureVersion'),
    timestamp: str = Query(..., alias='Timestamp'),
    signature: str = Query(..., alias='Signature'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#Operation=GetShippingLabel&Action=GetShippingLabel',
    description=""" This operation generates a pre-paid UPS shipping label that you will use to ship your device to AWS for processing. """,
    tags=['job_crud_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def p_o_s_t__get_shipping_label(
    operation: Operation8 = Query(..., alias='Operation'),
    action: Union[Action8, str, str, str] = Query(..., alias='Action'),
    version: Union[Version, str, str, str] = Query(..., alias='Version'),
    a_w_s_access_key_id: str = Query(..., alias='AWSAccessKeyId'),
    signature_method: str = Query(..., alias='SignatureMethod'),
    signature_version: str = Query(..., alias='SignatureVersion'),
    timestamp: str = Query(..., alias='Timestamp'),
    signature: str = Query(..., alias='Signature'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/#Operation=GetStatus&Action=GetStatus',
    description=""" This operation returns information about a job, including where the job is in the processing pipeline, the status of the results, and the signature value associated with the job. You can only return information about jobs you own. """,
    tags=['job_crud_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def g_e_t__get_status(
    job_id: str = Query(..., alias='JobId'),
    a_p_i_version: Optional[str] = Query(None, alias='APIVersion'),
    operation: Operation12 = Query(..., alias='Operation'),
    action: Union[Action12, str, str, str] = Query(..., alias='Action'),
    version: Union[Version, str, str, str] = Query(..., alias='Version'),
    a_w_s_access_key_id: str = Query(..., alias='AWSAccessKeyId'),
    signature_method: str = Query(..., alias='SignatureMethod'),
    signature_version: str = Query(..., alias='SignatureVersion'),
    timestamp: str = Query(..., alias='Timestamp'),
    signature: str = Query(..., alias='Signature'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#Operation=GetStatus&Action=GetStatus',
    description=""" This operation returns information about a job, including where the job is in the processing pipeline, the status of the results, and the signature value associated with the job. You can only return information about jobs you own. """,
    tags=['job_search_and_listings'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def p_o_s_t__get_status(
    operation: Operation12 = Query(..., alias='Operation'),
    action: Union[Action12, str, str, str] = Query(..., alias='Action'),
    version: Union[Version, str, str, str] = Query(..., alias='Version'),
    a_w_s_access_key_id: str = Query(..., alias='AWSAccessKeyId'),
    signature_method: str = Query(..., alias='SignatureMethod'),
    signature_version: str = Query(..., alias='SignatureVersion'),
    timestamp: str = Query(..., alias='Timestamp'),
    signature: str = Query(..., alias='Signature'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/#Operation=ListJobs&Action=ListJobs',
    description=""" This operation returns the jobs associated with the requester. AWS Import/Export lists the jobs in reverse chronological order based on the date of creation. For example if Job Test1 was created 2009Dec30 and Test2 was created 2010Feb05, the ListJobs operation would return Test2 followed by Test1. """,
    tags=['job_crud_operations', 'job_search_and_listings'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def g_e_t__list_jobs(
    max_jobs: Optional[int] = Query(None, alias='MaxJobs'),
    marker: Optional[str] = Query(None, alias='Marker'),
    a_p_i_version: Optional[str] = Query(None, alias='APIVersion'),
    operation: Operation16 = Query(..., alias='Operation'),
    action: Union[Action16, str, str, str] = Query(..., alias='Action'),
    version: Union[Version, str, str, str] = Query(..., alias='Version'),
    a_w_s_access_key_id: str = Query(..., alias='AWSAccessKeyId'),
    signature_method: str = Query(..., alias='SignatureMethod'),
    signature_version: str = Query(..., alias='SignatureVersion'),
    timestamp: str = Query(..., alias='Timestamp'),
    signature: str = Query(..., alias='Signature'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#Operation=ListJobs&Action=ListJobs',
    description=""" This operation returns the jobs associated with the requester. AWS Import/Export lists the jobs in reverse chronological order based on the date of creation. For example if Job Test1 was created 2009Dec30 and Test2 was created 2010Feb05, the ListJobs operation would return Test2 followed by Test1. """,
    tags=['job_crud_operations', 'job_search_and_listings'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def p_o_s_t__list_jobs(
    max_jobs: Optional[str] = Query(None, alias='MaxJobs'),
    marker: Optional[str] = Query(None, alias='Marker'),
    operation: Operation16 = Query(..., alias='Operation'),
    action: Union[Action16, str, str, str] = Query(..., alias='Action'),
    version: Union[Version, str, str, str] = Query(..., alias='Version'),
    a_w_s_access_key_id: str = Query(..., alias='AWSAccessKeyId'),
    signature_method: str = Query(..., alias='SignatureMethod'),
    signature_version: str = Query(..., alias='SignatureVersion'),
    timestamp: str = Query(..., alias='Timestamp'),
    signature: str = Query(..., alias='Signature'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/#Operation=UpdateJob&Action=UpdateJob',
    description=""" You use this operation to change the parameters specified in the original manifest file by supplying a new manifest file. The manifest file attached to this request replaces the original manifest file. You can only use the operation after a CreateJob request but before the data transfer starts and you can only use it on jobs you own. """,
    tags=['job_crud_operations'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def g_e_t__update_job(
    job_id: str = Query(..., alias='JobId'),
    manifest: str = Query(..., alias='Manifest'),
    job_type: JobType = Query(..., alias='JobType'),
    validate_only: bool = Query(..., alias='ValidateOnly'),
    a_p_i_version: Optional[str] = Query(None, alias='APIVersion'),
    operation: Operation20 = Query(..., alias='Operation'),
    action: Union[Action20, str, str, str] = Query(..., alias='Action'),
    version: Union[Version, str, str, str] = Query(..., alias='Version'),
    a_w_s_access_key_id: str = Query(..., alias='AWSAccessKeyId'),
    signature_method: str = Query(..., alias='SignatureMethod'),
    signature_version: str = Query(..., alias='SignatureVersion'),
    timestamp: str = Query(..., alias='Timestamp'),
    signature: str = Query(..., alias='Signature'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#Operation=UpdateJob&Action=UpdateJob',
    description=""" You use this operation to change the parameters specified in the original manifest file by supplying a new manifest file. The manifest file attached to this request replaces the original manifest file. You can only use the operation after a CreateJob request but before the data transfer starts and you can only use it on jobs you own. """,
    tags=['job_crud_operations', 'shipping_label_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def p_o_s_t__update_job(
    operation: Operation20 = Query(..., alias='Operation'),
    action: Union[Action20, str, str, str] = Query(..., alias='Action'),
    version: Union[Version, str, str, str] = Query(..., alias='Version'),
    a_w_s_access_key_id: str = Query(..., alias='AWSAccessKeyId'),
    signature_method: str = Query(..., alias='SignatureMethod'),
    signature_version: str = Query(..., alias='SignatureVersion'),
    timestamp: str = Query(..., alias='Timestamp'),
    signature: str = Query(..., alias='Signature'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MCP Server")
    parser.add_argument(
        "transport",
        choices=["stdio", "sse", "streamable-http"],
        help="Transport mode (stdio, sse or streamable-http)",
    )
    args = parser.parse_args()

    if "CONFIG_PATH" in os.environ:
        config_path = os.environ["CONFIG_PATH"]
        app.load_configuration(config_path)

    if "CONFIG" in os.environ:
        config = os.environ["CONFIG"]
        app.load_configuration_from_string(config)

    if "SECURITY" in os.environ:
        security_params = BaseSecurity.parse_security_parameters_from_env(
            os.environ,
        )

        app.set_security_params(security_params)

    mcp_settings = json.loads(os.environ.get("MCP_SETTINGS", "{}"))

    app.get_mcp(**mcp_settings).run(transport=args.transport)
